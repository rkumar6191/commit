import os
import sys
import  re
import json
revision1 = "DEBUG:root:SVN-fs-dump-format-version: 2\n"\
    "\n"\
    "UUID: ddac98b1-ce49-4c74-b64a-d0c21275d3c9\n"\
    "\n"\
    "Revision-number: 113\n"\
    "Prop-content-length: 99\n"\
    "Content-length: 99\n"\
    "\n"\
    "K 10\n"\
    "svn:author\n"\
    "V 5\n"\
    "admin\n"\
    "K 8\n"\
    "svn:date\n"\
    "V 27\n"\
    "2017-06-07T06:55:30.222894Z\n"\
    "K 7\n"\
    "svn:log\n"\
    "V 0\n"\
    "\n"\
    "PROPS-END\n"\
    "\n"\
    "Node-path: C/6.txt\n"\
    "Node-kind: file\n"\
    "Node-action: add\n"\
    "Text-content-md5: d41d8cd98f00b204e9800998ecf8427e\n"\
    "Text-content-sha1: da39a3ee5e6b4b0d3255bfef95601890afd80709\n"\
    "Prop-content-length: 10\n"\
    "Text-content-length: 0\n"\
    "Content-length: 10\n"\
    "\n"\
    "PROPS-END\n"\
    "\n"\
    "\n"\
    "Node-path: C/7.txt\n"\
    "Node-kind: file\n"\
    "Node-action: add\n"\
    "Text-content-md5: d41d8cd98f00b204e9800998ecf8427e\n"\
    "Text-content-sha1: da39a3ee5e6b4b0d3255bfef95601890afd80709\n"\
    "Prop-content-length: 10\n"\
    "Text-content-length: 0\n"\
    "Content-length: 10\n"\
    "\n"\
    "PROPS-END\n"\
    "\n"\
    ""
revision2 = "DEBUG:root:SVN-fs-dump-format-version: 2\n"\
    "\n"\
    "UUID: ddac98b1-ce49-4c74-b64a-d0c21275d3c9\n"\
    "\n"\
    "Revision-number: 113\n"\
    "Prop-content-length: 99\n"\
    "Content-length: 99\n"\
    "\n"\
    "K 10\n"\
    "svn:author\n"\
    "V 5\n"\
    "admin\n"\
    "K 8\n"\
    "svn:date\n"\
    "V 27\n"\
    "2017-06-07T06:55:30.222894Z\n"\
    "K 7\n"\
    "svn:log\n"\
    "V 0\n"\
    "\n"\
    "PROPS-END\n"\
    "\n"\
    "Node-path: C/6.txt\n"\
    "Node-kind: file\n"\
    "Node-action: change\n"\
    "Text-content-md5: d41d8cd98f00b204e9800998ecf8427e\n"\
    "Text-content-sha1: da39a3ee5e6b4b0d3255bfef95601890afd80709\n"\
    "Prop-content-length: 10\n"\
    "Text-content-length: 0\n"\
    "Content-length: 5\n"\
    "\n"\
    "6.txt\n"\
    "6.txt\n"\
    "\n"\
    "Node-path: C/7.txt\n"\
    "Node-kind: file\n"\
    "Node-action: change\n"\
    "Text-content-md5: d41d8cd98f00b204e9800998ecf8427e\n"\
    "Text-content-sha1: da39a3ee5e6b4b0d3255bfef95601890afd80709\n"\
    "Prop-content-length: 10\n"\
    "Text-content-length: 0\n"\
    "Content-length: 5\n"\
    "\n"\
    "faf\n"\
    "afft\n"\
    "6.txt\n"\
    "\n"\
    ""
revision3 = "DEBUG:root:SVN-fs-dump-format-version: 2\n"\
    "\n"\
    "UUID: ddac98b1-ce49-4c74-b64a-d0c21275d3c9\n"\
    "\n"\
    "Revision-number: 113\n"\
    "Prop-content-length: 99\n"\
    "Content-length: 99\n"\
    "\n"\
    "K 10\n"\
    "svn:author\n"\
    "V 5\n"\
    "admin\n"\
    "K 8\n"\
    "svn:date\n"\
    "V 27\n"\
    "2017-06-07T06:55:30.222894Z\n"\
    "K 7\n"\
    "svn:log\n"\
    "V 0\n"\
    "\n"\
    "PROPS-END\n"\
    "\n"\
    "Node-path: C/6.txt\n"\
    "Node-action: delete\n"\
    "\n"\
    "\n"\
    "Node-path: C/7.txt\n"\
    "Node-action: delete\n"\
    "\n"\
    "\n"\
    ""
def update_revision(revision):
    catch = revision.split('\n')
    print catch
    catch_len = len(catch)
    catch_index = 0
    u_rev = []
    changed_revision = ''
    path_flag = False
    content_flag = False
    change_flag = False
    path = ''
    kind = ''
    action = ''
    content = []
    for line in catch:
        catch_index += 1
        if re.search(r'Node-path: ',line, re.M | re.I) and content_flag == False:
            path = re.sub(r'Node-path: ', '', line)
            path_flag = True
            content = []
            print path
        elif re.search(r'Node-kind: ', line, re.M | re.I):
            kind = re.sub(r'Node-kind: ', '', line)
        elif re.search(r'Node-action: ', line, re.M | re.I):
            action = re.sub(r'Node-action: ', '', line)
        elif re.search(r'Node-path: ',line, re.M | re.I) and content_flag == True or action == 'delete':
            if action != 'delete':
                content_flag = False
                content.pop(0)
                content.pop()
            myjson = {
                'Node-path': path,
                'Node-kind': kind,
                'Node-action': action,
                'Text-content': content
            }
            u_rev.append(myjson)
            action = ''
            path = re.sub(r'Node-path: ', '', line)
            path_flag = True
            content = []
            print path
            print u_rev
        elif re.search(r'Text-content-length: ', line, re.M | re.I):
            content_flag = True
        if path_flag == True and content_flag == True:
            if re.search(r'Text-content-length: ', line, re.M | re.I) or re.search(r'Content-length: ', line, re.M | re.I):
                continue
            content.append(line)
        if catch_index == catch_len:
            if action != 'delete' and action != '':
                content.pop(0)
                content.pop()
                content.pop()
            myjson = {
                'Node-path': path,
                'Node-kind': kind,
                'Node-action': action,
                'Text-content': content
            }
            u_rev.append(myjson)
    data_len = len(u_rev)
    print '-------u rev ----' , u_rev
    for i in range(data_len):
        rev_path = u_rev[i]['Node-path']
        if u_rev[i]['Node-action'] == 'delete':
            remove_path = rev_path + '.json'
            print '--------- remove path -----' + remove_path
            os.remove(remove_path)
            continue
        elif u_rev[i]['Node-action'] == 'add':
            if u_rev[i]['Node-kind'] == 'dir':
                os.makedirs(rev_path)
            else:
                rev_split = rev_path.split('/')
                rev_split_len = len(rev_split)
                rev_file = rev_split[rev_split_len - 1]
                rev_split.remove(rev_file)
                rev_path_start = '/'
                rev_dir = rev_path_start.join(rev_split)
                if not os.path.exists(rev_dir):
                    os.makedirs(rev_dir)
                revision_filepath = rev_path + '.json'
                with open(revision_filepath, 'w') as f:
                    addjson = {
                        'Node-path': '',
                        'Node-kind': '',
                        'Node-action': '',
                        'Text-content': []
                    }
                    json.dump(addjson, f)
        elif u_rev[i]['Node-action'] == 'change':
            change_flag = True
            revision_filepath = rev_path + '.json'
            with open(revision_filepath) as f:
                origin_rev = json.load(f)
            b = len(u_rev[i]['Text-content'])
            a = len(origin_rev['Text-content'])
            if b < a:
                for count1 in range(b):
                    if u_rev[i]['Text-content'][count1] != origin_rev['Text-content'][count1]:
                        origin_rev['Text-content'].append(u_rev[i]['Text-content'][count1])
            else:
                for count2 in range(a):
                    if u_rev[i]['Text-content'][count2] != origin_rev['Text-content'][count2]:
                        origin_rev['Text-content'].append(u_rev[i]['Text-content'][count2])
                for count3 in range(a, b):
                    origin_rev['Text-content'].append(u_rev[i]['Text-content'][count3])
            changejson = {
                'Node-path': u_rev[i]['Node-path'],
                'Node-kind': u_rev[i]['Node-kind'],
                'Node-action': u_rev[i]['Node-action'],
                'Text-content': origin_rev['Text-content']
            }
            with open(revision_filepath, 'w') as f:
                json.dump(changejson, f)
    if change_flag == True:
        new_flag = False

        first_flag = True
        last_flag = True
        rev_index = 0
        rev_changed_path = ''
        for line in catch:
            if re.search(r'Text-content-length: ', line, re.M | re.I):
                new_flag = True
                last_flag = True
                first_flag = True
            if re.search(r'Node-path: ', line, re.M | re.I):
                new_flag = False
                rev_changed_path = re.sub(r'Node-path: ', '', line)
            if new_flag == True:
                if re.search(r'Text-content-length: ', line, re.M | re.I) or re.search(r'Content-length: ', line, re.M | re.I):
                    changed_revision += line + '\n'
                elif first_flag == True and line == '':
                    changed_revision += line + '\n'
                    first_flag = False
                elif last_flag == True:
                    with open(rev_changed_path + '.json') as f:
                        json_rev = json.load(f)
                    first_rev_len = len(json_rev['Text-content'])
                    for k in range(first_rev_len):
                        changed_revision += json_rev['Text-content'][k] + '\n'
                    changed_revision += '\n'
                    rev_index += 1
                    last_flag = False
            elif new_flag == False:
                changed_revision += line + '\n'
    return changed_revision

result_revision = update_revision(revision3)

print '---------------------'
print result_revision